<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="visual" viewBox="0 0 900 900" width="900" height="900" version="1.1"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path d="M0 28L18.8 31C37.7 34 75.3 40 112.8 43C150.3 46 187.7 46 225.2 41.5C262.7 37 300.3 28 337.8 26.5C375.3 25 412.7 31 450.2 34C487.7 37 525.3 37 562.8 38.5C600.3 40 637.7 43 675.2 43C712.7 43 750.3 40 787.8 35.5C825.3 31 862.7 25 881.3 22L900 19L900 0L881.3 0C862.7 0 825.3 0 787.8 0C750.3 0 712.7 0 675.2 0C637.7 0 600.3 0 562.8 0C525.3 0 487.7 0 450.2 0C412.7 0 375.3 0 337.8 0C300.3 0 262.7 0 225.2 0C187.7 0 150.3 0 112.8 0C75.3 0 37.7 0 18.8 0L0 0Z" fill="#7811ff"/><path d="M0 73L18.8 76C37.7 79 75.3 85 112.8 89.5C150.3 94 187.7 97 225.2 92.5C262.7 88 300.3 76 337.8 71.5C375.3 67 412.7 70 450.2 71.5C487.7 73 525.3 73 562.8 73C600.3 73 637.7 73 675.2 76C712.7 79 750.3 85 787.8 80.5C825.3 76 862.7 61 881.3 53.5L900 46L900 17L881.3 20C862.7 23 825.3 29 787.8 33.5C750.3 38 712.7 41 675.2 41C637.7 41 600.3 38 562.8 36.5C525.3 35 487.7 35 450.2 32C412.7 29 375.3 23 337.8 24.5C300.3 26 262.7 35 225.2 39.5C187.7 44 150.3 44 112.8 41C75.3 38 37.7 32 18.8 29L0 26Z" fill="#7f24ff"/><path d="M0 145L18.8 148C37.7 151 75.3 157 112.8 158.5C150.3 160 187.7 157 225.2 152.5C262.7 148 300.3 142 337.8 140.5C375.3 139 412.7 142 450.2 140.5C487.7 139 525.3 133 562.8 130C600.3 127 637.7 127 675.2 131.5C712.7 136 750.3 145 787.8 140.5C825.3 136 862.7 118 881.3 109L900 100L900 44L881.3 51.5C862.7 59 825.3 74 787.8 78.5C750.3 83 712.7 77 675.2 74C637.7 71 600.3 71 562.8 71C525.3 71 487.7 71 450.2 69.5C412.7 68 375.3 65 337.8 69.5C300.3 74 262.7 86 225.2 90.5C187.7 95 150.3 92 112.8 87.5C75.3 83 37.7 77 18.8 74L0 71Z" fill="#8631ff"/><path d="M0 190L18.8 200.5C37.7 211 75.3 232 112.8 235C150.3 238 187.7 223 225.2 214C262.7 205 300.3 202 337.8 208C375.3 214 412.7 229 450.2 236.5C487.7 244 525.3 244 562.8 236.5C600.3 229 637.7 214 675.2 211C712.7 208 750.3 217 787.8 212.5C825.3 208 862.7 190 881.3 181L900 172L900 98L881.3 107C862.7 116 825.3 134 787.8 138.5C750.3 143 712.7 134 675.2 129.5C637.7 125 600.3 125 562.8 128C525.3 131 487.7 137 450.2 138.5C412.7 140 375.3 137 337.8 138.5C300.3 140 262.7 146 225.2 150.5C187.7 155 150.3 158 112.8 156.5C75.3 155 37.7 149 18.8 146L0 143Z" fill="#8d3dff"/><path d="M0 271L18.8 287.5C37.7 304 75.3 337 112.8 341.5C150.3 346 187.7 322 225.2 305.5C262.7 289 300.3 280 337.8 286C375.3 292 412.7 313 450.2 328C487.7 343 525.3 352 562.8 341.5C600.3 331 637.7 301 675.2 298C712.7 295 750.3 319 787.8 316C825.3 313 862.7 283 881.3 268L900 253L900 170L881.3 179C862.7 188 825.3 206 787.8 210.5C750.3 215 712.7 206 675.2 209C637.7 212 600.3 227 562.8 234.5C525.3 242 487.7 242 450.2 234.5C412.7 227 375.3 212 337.8 206C300.3 200 262.7 203 225.2 212C187.7 221 150.3 236 112.8 233C75.3 230 37.7 209 18.8 198.5L0 188Z" fill="#9347ff"/><path d="M0 352L18.8 362.5C37.7 373 75.3 394 112.8 397C150.3 400 187.7 385 225.2 370C262.7 355 300.3 340 337.8 347.5C375.3 355 412.7 385 450.2 398.5C487.7 412 525.3 409 562.8 397C600.3 385 637.7 364 675.2 365.5C712.7 367 750.3 391 787.8 392.5C825.3 394 862.7 373 881.3 362.5L900 352L900 251L881.3 266C862.7 281 825.3 311 787.8 314C750.3 317 712.7 293 675.2 296C637.7 299 600.3 329 562.8 339.5C525.3 350 487.7 341 450.2 326C412.7 311 375.3 290 337.8 284C300.3 278 262.7 287 225.2 303.5C187.7 320 150.3 344 112.8 339.5C75.3 335 37.7 302 18.8 285.5L0 269Z" fill="#9950ff"/><path d="M0 559L18.8 554.5C37.7 550 75.3 541 112.8 538C150.3 535 187.7 538 225.2 526C262.7 514 300.3 487 337.8 488.5C375.3 490 412.7 520 450.2 545.5C487.7 571 525.3 592 562.8 593.5C600.3 595 637.7 577 675.2 581.5C712.7 586 750.3 613 787.8 605.5C825.3 598 862.7 556 881.3 535L900 514L900 350L881.3 360.5C862.7 371 825.3 392 787.8 390.5C750.3 389 712.7 365 675.2 363.5C637.7 362 600.3 383 562.8 395C525.3 407 487.7 410 450.2 396.5C412.7 383 375.3 353 337.8 345.5C300.3 338 262.7 353 225.2 368C187.7 383 150.3 398 112.8 395C75.3 392 37.7 371 18.8 360.5L0 350Z" fill="#9f59ff"/><path d="M0 613L18.8 604C37.7 595 75.3 577 112.8 572.5C150.3 568 187.7 577 225.2 568C262.7 559 300.3 532 337.8 530.5C375.3 529 412.7 553 450.2 575.5C487.7 598 525.3 619 562.8 625C600.3 631 637.7 622 675.2 629.5C712.7 637 750.3 661 787.8 652C825.3 643 862.7 601 881.3 580L900 559L900 512L881.3 533C862.7 554 825.3 596 787.8 603.5C750.3 611 712.7 584 675.2 579.5C637.7 575 600.3 593 562.8 591.5C525.3 590 487.7 569 450.2 543.5C412.7 518 375.3 488 337.8 486.5C300.3 485 262.7 512 225.2 524C187.7 536 150.3 533 112.8 536C75.3 539 37.7 548 18.8 552.5L0 557Z" fill="#a462ff"/><path d="M0 667L18.8 653.5C37.7 640 75.3 613 112.8 605.5C150.3 598 187.7 610 225.2 605.5C262.7 601 300.3 580 337.8 581.5C375.3 583 412.7 607 450.2 631C487.7 655 525.3 679 562.8 682C600.3 685 637.7 667 675.2 668.5C712.7 670 750.3 691 787.8 682C825.3 673 862.7 634 881.3 614.5L900 595L900 557L881.3 578C862.7 599 825.3 641 787.8 650C750.3 659 712.7 635 675.2 627.5C637.7 620 600.3 629 562.8 623C525.3 617 487.7 596 450.2 573.5C412.7 551 375.3 527 337.8 528.5C300.3 530 262.7 557 225.2 566C187.7 575 150.3 566 112.8 570.5C75.3 575 37.7 593 18.8 602L0 611Z" fill="#aa6bff"/><path d="M0 829L18.8 829C37.7 829 75.3 829 112.8 823C150.3 817 187.7 805 225.2 802C262.7 799 300.3 805 337.8 811C375.3 817 412.7 823 450.2 824.5C487.7 826 525.3 823 562.8 818.5C600.3 814 637.7 808 675.2 811C712.7 814 750.3 826 787.8 829C825.3 832 862.7 826 881.3 823L900 820L900 593L881.3 612.5C862.7 632 825.3 671 787.8 680C750.3 689 712.7 668 675.2 666.5C637.7 665 600.3 683 562.8 680C525.3 677 487.7 653 450.2 629C412.7 605 375.3 581 337.8 579.5C300.3 578 262.7 599 225.2 603.5C187.7 608 150.3 596 112.8 603.5C75.3 611 37.7 638 18.8 651.5L0 665Z" fill="#af73ff"/><path d="M0 883L18.8 878.5C37.7 874 75.3 865 112.8 860.5C150.3 856 187.7 856 225.2 856C262.7 856 300.3 856 337.8 859C375.3 862 412.7 868 450.2 872.5C487.7 877 525.3 880 562.8 878.5C600.3 877 637.7 871 675.2 869.5C712.7 868 750.3 871 787.8 872.5C825.3 874 862.7 874 881.3 874L900 874L900 818L881.3 821C862.7 824 825.3 830 787.8 827C750.3 824 712.7 812 675.2 809C637.7 806 600.3 812 562.8 816.5C525.3 821 487.7 824 450.2 822.5C412.7 821 375.3 815 337.8 809C300.3 803 262.7 797 225.2 800C187.7 803 150.3 815 112.8 821C75.3 827 37.7 827 18.8 827L0 827Z" fill="#b47bff"/><path d="M0 901L18.8 901C37.7 901 75.3 901 112.8 901C150.3 901 187.7 901 225.2 901C262.7 901 300.3 901 337.8 901C375.3 901 412.7 901 450.2 901C487.7 901 525.3 901 562.8 901C600.3 901 637.7 901 675.2 901C712.7 901 750.3 901 787.8 901C825.3 901 862.7 901 881.3 901L900 901L900 872L881.3 872C862.7 872 825.3 872 787.8 870.5C750.3 869 712.7 866 675.2 867.5C637.7 869 600.3 875 562.8 876.5C525.3 878 487.7 875 450.2 870.5C412.7 866 375.3 860 337.8 857C300.3 854 262.7 854 225.2 854C187.7 854 150.3 854 112.8 858.5C75.3 863 37.7 872 18.8 876.5L0 881Z" fill="#b983ff"/></svg>